{
  "permissions": {
    "allow": [
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(md-tree:*)",
      "Bash(npm install:*)",
      "mcp__playwright__browser_snapshot",
      "mcp__puppeteer-mcp-claude__puppeteer_launch",
      "mcp__playwright__browser_navigate",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__sequential-thinking__process_thought",
      "mcp__sequential-thinking__generate_summary",
      "Bash(mkdir:*)",
      "Bash(cd:*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npx tsc:*)",
      "Bash(pnpm install:*)",
      "Bash(pnpm --filter @dms/frontend lint)",
      "Bash(pnpm tsc:*)",
      "Bash(pnpm test:*)",
      "Bash(mv:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm test:*)",
      "Bash(cd:*)",
      "Bash(git add:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(grep:*)",
      "Bash(npm run:*)",
      "Bash(pnpm add:*)",
      "Bash(npx prisma generate:*)",
      "Bash(npx prisma:*)",
      "Bash(cp:*)",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_select_option",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_close",
      "Bash(rm:*)",
      "Bash(find:*)",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_file_upload",
      "Bash(curl:*)",
      "mcp__playwright__browser_console_messages",
      "Bash(cd:*)",
      "Bash(node:*)",
      "mcp__puppeteer-mcp-claude__puppeteer_new_page",
      "Bash(pnpm dev:*)",
      "mcp__puppeteer-mcp-claude__puppeteer_navigate",
      "mcp__puppeteer-mcp-claude__puppeteer_screenshot",
      "mcp__puppeteer-mcp-claude__puppeteer_evaluate",
      "mcp__puppeteer-mcp-claude__puppeteer_get_text",
      "mcp__puppeteer-mcp-claude__puppeteer_click",
      "mcp__puppeteer-mcp-claude__puppeteer_wait_for_selector",
      "mcp__puppeteer-mcp-claude__puppeteer_type",
      "mcp__puppeteer-mcp-claude__puppeteer_close_browser",
      "Bash(pnmp test:*)",
      "Bash(pnpm run lint:*)",
      "Bash(pnpm run:*)",
      "Bash(pnmp run lint)",
      "Bash(pnpm --filter @dms/frontend test ResponsePlanningForm.test.tsx)",
      "Bash(pnpm --filter @dms/frontend test ResponsePlanningForm.runtime.test.tsx)",
      "Bash(pnpm --filter @dms/frontend test ResponsePlanningForm.test.tsx -t \"switches response type correctly\")",
      "Bash(pnmp run typecheck)",
      "Bash(npx playwright:*)",
      "Bash(cd:*)",
      "Bash(pnpm playwright test:*)",
      "Bash(pnmp:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(/BMad:agents:architect)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(pnpm build:*)",
      "Bash(pnpm --filter @dms/frontend typecheck)",
      "Bash(pnpm typecheck:*)",
      "Bash(pnpm --filter @dms/frontend test ResponseRejection.test.tsx)",
      "Bash(env)",
      "Bash(npx @playwright/mcp@latest:*)",
      "Bash(uvx:*)",
      "mcp__Context7__resolve-library-id",
      "mcp__Context7__get-library-docs",
      "Bash(pnpm --filter @dms/frontend run tsc --noEmit src/components/features/incident/*.tsx src/stores/incident.store.ts)",
      "Bash(pnpm --filter @dms/frontend run tsc --noEmit src/app/(dashboard)/coordinator/incidents/page.tsx)",
      "Bash(pnpm --filter @dms/frontend run lint)",
      "Bash(pnpm --filter @dms/frontend build)",
      "Bash(npx next lint:*)",
      "Bash(timeout 30s npx next build --no-lint)",
      "WebSearch",
      "Bash(timeout 30s pnpm test AutomaticPriorityAssigner.test.ts)",
      "Bash(timeout 30s pnpm --filter @dms/frontend build)",
      "Bash(timeout 10s npm run dev)",
      "Bash(pnpm --filter @dms/frontend test PriorityRuleManager.test.tsx)",
      "Bash(timeout 60s pnmp --filter @dms/frontend build)",
      "Bash(timeout 60s pnpm --filter @dms/frontend build)",
      "Bash(npx next build:*)",
      "Bash(timeout 120s pnpm --filter @dms/frontend build)",
      "Bash(timeout 90s pnpm --filter @dms/frontend build)",
      "Bash(pnpm --filter @dms/frontend run tsc --noEmit src/lib/sync/BackgroundSyncManager.ts src/stores/sync.store.ts src/types/service-worker.d.ts)",
      "Bash(cd:*)",
      "Bash(cd:*)",
      "Bash(timeout:*)",
      "Bash(pnpm --filter @dms/frontend run tsc --noEmit src/lib/sync/BackgroundSyncManager.ts)",
      "Bash(pnpm --filter @dms/frontend run typecheck)",
      "Bash(pnpm --filter @dms/frontend run tsc --noEmit src/lib/sync/SyncEngine.ts src/components/features/sync/ConflictResolver.tsx src/components/features/sync/ConflictComparison.tsx src/components/features/sync/ConflictAuditTrail.tsx src/app/api/v1/sync/conflicts/route.ts src/app/api/v1/sync/conflicts/resolve/route.ts)",
      "Bash(pnpm --filter @dms/frontend test ConflictResolver.test.tsx)",
      "Bash(cd:*)",
      "Bash(pnpm --filter @dms/frontend run tsc --noEmit)",
      "Bash(pnpm --filter @dms/frontend run tsc --noEmit src/app/(dashboard)/coordinator/donors/page.tsx src/hooks/useDonorCoordination.ts src/components/features/donors/DonorList.tsx src/components/features/donors/ResourceAvailabilityGrid.tsx src/components/features/donors/CoordinationWorkspace.tsx src/components/features/donors/DonorPerformanceChart.tsx)",
      "Bash(cd:*)",
      "Bash(cat:*)",
      "Bash(pnpm --filter @dms/frontend test PerformanceMetrics.test.tsx --passWithNoTests)",
      "Bash(pnpm --filter @dms/frontend run tsc --noEmit src/app/(dashboard)/coordinator/monitoring/page.tsx src/components/features/monitoring/*.tsx)",
      "Bash(pnpm --filter @dms/frontend test PerformanceMetrics.test.tsx)",
      "Bash(pnpm --filter @dms/frontend test UserActivityMonitor.test.tsx)",
      "Bash(pnpm --filter @dms/frontend test monitoring)",
      "Bash(pnpm --filter @dms/frontend test PerformanceMetrics.test.tsx UserActivityMonitor.test.tsx)",
      "Bash(netstat:*)",
      "Bash(ss:*)",
      "Bash(kill:*)"
    ],
    "deny": [],
    "additionalDirectories": [
      "/mnt/b/dev/claude"
    ]
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "sequential-thinking"
  ]
}