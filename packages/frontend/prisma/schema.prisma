generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Incident {
  id                       String   @id @default(cuid())
  name                     String
  type                     String
  subType                  String?
  source                   String
  severity                 String
  status                   String
  date                     DateTime
  preliminaryAssessmentIds String[]
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@map("incidents")
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  phone                String?
  organization         String?
  activeRoleId         String?
  isActive             Boolean   @default(true)
  lastSync             DateTime?
  resetToken           String?
  resetTokenExpiry     DateTime?
  requirePasswordReset Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accounts             Account[]
  sessions             Session[]
  activeRole           Role?     @relation("ActiveRole", fields: [activeRoleId], references: [id])
  roles                Role[]    @relation("RoleToUser")

  @@map("users")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  usersWithActive User[]           @relation("ActiveRole")
  users           User[]           @relation("RoleToUser")
  permissions     RolePermission[]

  @@map("roles")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Notification {
  id          String    @id @default(cuid())
  type        String
  title       String
  message     String
  targetRoles String[]
  entityId    String
  priority    String
  metadata    Json      @default("{}")
  status      String    @default("PENDING")
  createdAt   DateTime  @default(now())
  sentAt      DateTime?
  updatedAt   DateTime  @updatedAt

  @@map("notifications")
}

model AffectedEntity {
  id                     String                  @id @default(cuid())
  type                   String
  name                   String
  lga                    String
  ward                   String
  longitude              Float
  latitude               Float
  campName               String?
  campStatus             String?
  campCoordinatorName    String?
  campCoordinatorPhone   String?
  superviserName         String?
  superviserOrganization String?
  estimatedPopulation    Int?
  communityName          String?
  contactPersonName      String?
  contactPersonPhone     String?
  contactPersonRole      String?
  estimatedHouseholds    Int?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  assessments            PreliminaryAssessment[]

  @@map("affected_entities")
}

model PreliminaryAssessment {
  id                         String         @id @default(cuid())
  assessmentType             String
  affectedEntityId           String
  incidentType               String
  incidentSubType            String?
  severity                   String
  affectedPopulationEstimate Int            @default(0)
  affectedHouseholdsEstimate Int            @default(0)
  immediateNeedsDescription  String
  accessibilityStatus        String
  priorityLevel              String
  additionalDetails          String?
  gpsCoordinates             Json?
  status                     String         @default("DRAFT")
  assessorId                 String
  assessorName               String
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  affectedEntity             AffectedEntity @relation(fields: [affectedEntityId], references: [id])

  @@map("preliminary_assessments")
}

model Donor {
  id               String             @id @default(cuid())
  name             String
  organization     String
  email            String             @unique
  phone            String?
  performanceScore Float              @default(0)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  achievements     DonorAchievement[]
  commitments      DonorCommitment[]
  rapidResponses   RapidResponse[]

  @@map("donors")
}

model DonorCommitment {
  id               String         @id @default(cuid())
  donorId          String
  responseType     String
  quantity         Int
  unit             String
  targetDate       DateTime
  deliveredDate    DateTime?
  actualQuantity   Int?
  status           String         @default("PLANNED")
  incidentId       String?
  affectedEntityId String?
  rapidResponseId  String?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  donor            Donor          @relation(fields: [donorId], references: [id])
  rapidResponse    RapidResponse? @relation(fields: [rapidResponseId], references: [id])

  @@map("donor_commitments")
}

model DonorAchievement {
  id                 String    @id @default(cuid())
  donorId            String
  type               String
  title              String
  description        String
  category           String    @default("DELIVERY")
  progress           Float     @default(0)
  isUnlocked         Boolean   @default(false)
  unlockedAt         DateTime?
  commitmentId       String?
  responseType       String?
  quantityDelivered  Int?
  unit               String?
  deliveryDate       DateTime?
  incidentId         String?
  affectedEntityId   String?
  verificationStatus String?
  performanceScore   Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  donor              Donor     @relation(fields: [donorId], references: [id])

  @@map("donor_achievements")
}

model RapidResponse {
  id                    String            @id @default(cuid())
  responseType          String
  status                String
  plannedDate           DateTime
  deliveredDate         DateTime?
  affectedEntityId      String
  assessmentId          String?
  responderId           String
  responderName         String
  donorId               String?
  donorName             String?
  verificationStatus    String            @default("PENDING")
  syncStatus            String            @default("PENDING")
  offlineId             String?
  data                  Json
  otherItemsDelivered   Json              @default("[]")
  deliveryEvidence      Json              @default("[]")
  partialDeliveryData   Json?
  deliveryDocumentation Json?
  feedbackCount         Int?              @default(0)
  lastFeedbackAt        DateTime?
  requiresAttention     Boolean           @default(false)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  donorCommitments      DonorCommitment[]
  donor                 Donor?            @relation(fields: [donorId], references: [id])

  @@map("rapid_responses")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String
  action      String
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model AuditLog {
  id            String   @id @default(cuid())
  userId        String?
  userName      String?
  action        String
  resource      String
  resourceId    String?
  details       Json     @default("{}")
  ipAddress     String?
  userAgent     String?
  sessionId     String?
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())

  @@map("audit_logs")
}

model AchievementRule {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     String
  type         String   // DELIVERY_COUNT, PERFORMANCE_SCORE, TIME_BASED, etc.
  criteria     Json     // Flexible criteria object
  reward       Json     // Achievement details and rewards
  isActive     Boolean  @default(true)
  priority     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("achievement_rules")
}

model BulkImport {
  id                String   @id @default(cuid())
  fileName          String
  fileSize          Int
  totalRows         Int
  processedRows     Int      @default(0)
  successfulRows    Int      @default(0)
  failedRows        Int      @default(0)
  status            String   @default("PROCESSING") // PROCESSING, COMPLETED, FAILED, CANCELLED
  errors            Json     @default("[]")        // Array of error messages with row numbers
  importedBy        String
  importedByName    String
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("bulk_imports")
}
