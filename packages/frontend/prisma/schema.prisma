generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Incident {
  id        String   @id @default(cuid())
  name      String
  type      String
  subType   String?
  source    String
  severity  String
  status    String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  preliminaryAssessments PreliminaryAssessment[]
  affectedEntities       AffectedEntity[]

  @@map("incidents")
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  phone                String?
  organization         String?
  activeRoleId         String?
  isActive             Boolean   @default(true)
  lastSync             DateTime?
  resetToken           String?
  resetTokenExpiry     DateTime?
  requirePasswordReset Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  accounts             Account[]
  sessions             Session[]
  activeRole           Role?     @relation("ActiveRole", fields: [activeRoleId], references: [id])
  roles                Role[]    @relation("RoleToUser")

  @@map("users")
}

model Role {
  id              String           @id @default(cuid())
  name            String           @unique
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  usersWithActive User[]           @relation("ActiveRole")
  users           User[]           @relation("RoleToUser")
  permissions     RolePermission[]

  @@map("roles")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Notification {
  id          String    @id @default(cuid())
  type        String
  title       String
  message     String
  targetRoles String[]
  entityId    String
  priority    String
  metadata    Json      @default("{}")
  status      String    @default("PENDING")
  createdAt   DateTime  @default(now())
  sentAt      DateTime?
  updatedAt   DateTime  @updatedAt

  @@map("notifications")
}

model AffectedEntity {
  id                     String            @id @default(cuid())
  type                   String
  name                   String
  lga                    String
  ward                   String
  longitude              Float
  latitude               Float
  campName               String?
  campStatus             String?
  campCoordinatorName    String?
  campCoordinatorPhone   String?
  superviserName         String?
  superviserOrganization String?
  estimatedPopulation    Int?
  communityName          String?
  contactPersonName      String?
  contactPersonPhone     String?
  contactPersonRole      String?
  estimatedHouseholds    Int?
  incidentId             String?  // Foreign key to incident
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  
  // Relationships
  rapidAssessments       RapidAssessment[]
  incident               Incident?         @relation(fields: [incidentId], references: [id])

  @@map("affected_entities")
}

model PreliminaryAssessment {
  id                              String   @id @default(cuid())
  reportingDate                   DateTime
  reportingLatitude               Float
  reportingLongitude              Float
  reportingLGA                    String
  reportingWard                   String
  numberLivesLost                 Int      @default(0)
  numberInjured                   Int      @default(0)
  numberDisplaced                 Int      @default(0)
  numberHousesAffected            Int      @default(0)
  schoolsAffected                 String?  // List of affected schools
  medicalFacilitiesAffected       String?  // List of affected medical facilities
  estimatedAgriculturalLandsAffected String? // Description/estimate of agricultural impact
  reportingAgent                  String   // LEMC agent or staff name
  additionalDetails               Json     @default("{}")
  incidentId                      String?  // Nullable - preliminary assessments can predate incidents
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  
  // Relationships
  incident                        Incident? @relation(fields: [incidentId], references: [id])

  @@map("preliminary_assessments")
}

model RapidAssessment {
  id                    String   @id @default(cuid())
  rapidAssessmentType   String   // Health, WASH, Shelter, Security, Food, Population, Other
  rapidAssessmentDate   DateTime
  affectedEntityId      String
  assessorName          String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  affectedEntity        AffectedEntity @relation(fields: [affectedEntityId], references: [id])
  
  // Related assessment details
  healthAssessment      HealthAssessment?
  populationAssessment  PopulationAssessment?
  foodAssessment        FoodAssessment?
  washAssessment        WASHAssessment?
  shelterAssessment     ShelterAssessment?
  securityAssessment    SecurityAssessment?

  @@map("rapid_assessments")
}

model HealthAssessment {
  rapidAssessmentId         String   @id
  hasFunctionalClinic       Boolean
  numberHealthFacilities    Int
  healthFacilityType        String
  qualifiedHealthWorkers    Int
  hasMedicineSupply         Boolean
  hasMedicalSupplies        Boolean
  hasMaternalChildServices  Boolean
  commonHealthIssues        String[] // Array of: Diarrhea, Malaria, Respiratory, Malnutrition, Other
  additionalHealthDetails   Json     @default("{}")
  rapidAssessment           RapidAssessment @relation(fields: [rapidAssessmentId], references: [id], onDelete: Cascade)

  @@map("health_assessments")
}

model PopulationAssessment {
  rapidAssessmentId             String   @id
  totalHouseholds               Int
  totalPopulation               Int
  populationMale                Int
  populationFemale              Int
  populationUnder5              Int
  pregnantWomen                 Int
  lactatingMothers              Int
  personWithDisability          Int
  elderlyPersons                Int
  separatedChildren             Int
  numberLivesLost               Int
  numberInjured                 Int
  additionalPopulationDetails   Json     @default("{}")
  rapidAssessment               RapidAssessment @relation(fields: [rapidAssessmentId], references: [id], onDelete: Cascade)

  @@map("population_assessments")
}

model FoodAssessment {
  rapidAssessmentId                   String   @id
  foodSource                          String[] // Array of: Government kitchen, Humanitarian Partners, Community organizations, Individuals, Other
  availableFoodDurationDays           Int      // How long will available food last
  additionalFoodRequiredPersons       Int      // Additional food needed in terms of persons
  additionalFoodRequiredHouseholds    Int      // Additional food needed in terms of households
  additionalFoodDetails               Json     @default("{}")
  rapidAssessment                     RapidAssessment @relation(fields: [rapidAssessmentId], references: [id], onDelete: Cascade)

  @@map("food_assessments")
}

model WASHAssessment {
  rapidAssessmentId           String   @id
  waterSource                 String[] // Array of: Borehole, River/Stream, Water trucks, Tap water, Sachet water, Other
  isWaterSufficient           Boolean  // Is the available water sufficient
  functionalLatrinesAvailable Int      // How many functional latrines are available
  areLatrinesSufficient       Boolean
  hasOpenDefecationConcerns   Boolean
  additionalWashDetails       Json     @default("{}")
  rapidAssessment             RapidAssessment @relation(fields: [rapidAssessmentId], references: [id], onDelete: Cascade)

  @@map("wash_assessments")
}

model ShelterAssessment {
  rapidAssessmentId         String   @id
  areSheltersSufficient     Boolean
  shelterTypes              String[] // Array of: Trampoline, Open space, Local materials, Communal structure, Other
  requiredShelterType       String[] // Array of: Trampoline, Open space, Local materials, Communal structure, Other
  numberSheltersRequired    Int      // If shelter insufficient, estimate number required
  areOvercrowded            Boolean
  provideWeatherProtection  Boolean
  additionalShelterDetails  Json     @default("{}")
  rapidAssessment           RapidAssessment @relation(fields: [rapidAssessmentId], references: [id], onDelete: Cascade)

  @@map("shelter_assessments")
}

model SecurityAssessment {
  rapidAssessmentId                 String   @id
  gbvCasesReported                  Boolean
  hasProtectionReportingMechanism   Boolean
  vulnerableGroupsHaveAccess        Boolean
  additionalSecurityDetails         Json     @default("{}")
  rapidAssessment                   RapidAssessment @relation(fields: [rapidAssessmentId], references: [id], onDelete: Cascade)

  @@map("security_assessments")
}

model Donor {
  id               String             @id @default(cuid())
  name             String
  organization     String
  email            String             @unique
  phone            String?
  performanceScore Float              @default(0)
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  achievements     DonorAchievement[]
  commitments      DonorCommitment[]
  rapidResponses   RapidResponse[]

  @@map("donors")
}

model DonorCommitment {
  id               String         @id @default(cuid())
  donorId          String
  responseType     String
  quantity         Int
  unit             String
  targetDate       DateTime
  deliveredDate    DateTime?
  actualQuantity   Int?
  status           String         @default("PLANNED")
  incidentId       String?
  affectedEntityId String?
  rapidResponseId  String?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  donor            Donor          @relation(fields: [donorId], references: [id])
  rapidResponse    RapidResponse? @relation(fields: [rapidResponseId], references: [id])

  @@map("donor_commitments")
}

model DonorAchievement {
  id                 String    @id @default(cuid())
  donorId            String
  type               String
  title              String
  description        String
  category           String    @default("DELIVERY")
  progress           Float     @default(0)
  isUnlocked         Boolean   @default(false)
  unlockedAt         DateTime?
  commitmentId       String?
  responseType       String?
  quantityDelivered  Int?
  unit               String?
  deliveryDate       DateTime?
  incidentId         String?
  affectedEntityId   String?
  verificationStatus String?
  performanceScore   Float?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  donor              Donor     @relation(fields: [donorId], references: [id])

  @@map("donor_achievements")
}

model RapidResponse {
  id                    String            @id @default(cuid())
  responseType          String
  status                String
  plannedDate           DateTime
  deliveredDate         DateTime?
  affectedEntityId      String
  assessmentId          String?
  responderId           String
  responderName         String
  donorId               String?
  donorName             String?
  verificationStatus    String            @default("PENDING")
  syncStatus            String            @default("PENDING")
  offlineId             String?
  data                  Json
  otherItemsDelivered   Json              @default("[]")
  deliveryEvidence      Json              @default("[]")
  partialDeliveryData   Json?
  deliveryDocumentation Json?
  feedbackCount         Int?              @default(0)
  lastFeedbackAt        DateTime?
  requiresAttention     Boolean           @default(false)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  donorCommitments      DonorCommitment[]
  donor                 Donor?            @relation(fields: [donorId], references: [id])

  @@map("rapid_responses")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String
  action      String
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// Story 9.3: Enhanced Audit & Monitoring Models

model AuditLog {
  id            String   @id @default(cuid())
  userId        String?
  userName      String?
  action        String
  resource      String
  resourceId    String?
  details       Json     @default("{}")
  ipAddress     String?
  userAgent     String?
  sessionId     String?
  timestamp     DateTime @default(now())
  createdAt     DateTime @default(now())

  @@map("audit_logs")
}

// Extended user activity logging with comprehensive tracking
model UserActivity {
  id              String   @id @default(cuid())
  userId          String
  userName        String
  action          String
  resource        String
  resourceId      String?
  details         Json     @default("{}")
  eventType       String   // USER_ACTION, SYSTEM_EVENT, SECURITY_EVENT, API_ACCESS, DATA_CHANGE
  severity        String   // LOW, MEDIUM, HIGH, CRITICAL
  module          String   // assessment, response, user-management, auth, etc.
  method          String?  // HTTP method
  endpoint        String?  // API endpoint
  statusCode      Int?     // HTTP status code
  responseTime    Int?     // milliseconds
  errorMessage    String?
  oldData         Json?    // For data change events
  newData         Json?    // For data change events
  geoLocation     Json?    // {latitude, longitude, country, region}
  deviceInfo      Json?    // {deviceType, browser, os}
  ipAddress       String?
  userAgent       String?
  sessionId       String?
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())

  @@index([userId, timestamp])
  @@index([eventType, severity])
  @@index([module, timestamp])
  @@index([timestamp])
  @@map("user_activities")
}

// Security events and incidents
model SecurityEvent {
  id                   String    @id @default(cuid())
  eventType            String    // AUTH_FAILURE, PERMISSION_VIOLATION, SUSPICIOUS_ACTIVITY, DATA_BREACH_ATTEMPT, ACCOUNT_LOCKOUT
  severity             String    // LOW, MEDIUM, HIGH, CRITICAL
  userId               String?
  userName             String?
  ipAddress            String
  userAgent            String?
  description          String
  details              Json      @default("{}")
  actionTaken          String?
  requiresInvestigation Boolean   @default(false)
  investigationStatus   String?   // PENDING, IN_PROGRESS, RESOLVED, FALSE_POSITIVE
  investigatedBy       String?
  investigatedAt       DateTime?
  resolutionNotes      String?
  timestamp            DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@index([eventType, severity])
  @@index([requiresInvestigation, investigationStatus])
  @@index([timestamp])
  @@index([ipAddress])
  @@map("security_events")
}

// System performance metrics storage
model SystemMetrics {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  metricType    String   // database, api, queue, sync, system
  
  // Database metrics
  connectionCount      Int?
  activeQueries        Int?
  avgQueryTime         Float?
  slowQueries          Int?
  
  // API metrics
  requestsPerMinute    Float?
  avgResponseTime      Float?
  errorRate            Float?
  endpointStats        Json?  // Record<endpoint, {requestCount, avgResponseTime, errorRate}>
  
  // Queue metrics (BullMQ)
  activeJobs           Int?
  waitingJobs          Int?
  completedJobs        Int?
  failedJobs           Int?
  delayedJobs          Int?
  processingRate       Float?
  avgJobDuration       Float?
  
  // Sync engine metrics
  syncSuccessRate      Float?
  syncConflictRate     Float?
  avgSyncTime          Float?
  pendingItems         Int?
  lastSyncAt           DateTime?
  
  // System resource metrics
  cpuUsage             Float?
  memoryUsage          Float?
  diskUsage            Float?
  networkLatency       Float?
  
  // Aggregated metrics data
  hourlyStats          Json?
  dailyStats           Json?
  
  createdAt            DateTime @default(now())

  @@index([metricType, timestamp])
  @@index([timestamp])
  @@map("system_metrics")
}

// Data export jobs tracking
model AuditExport {
  id                String    @id @default(cuid())
  format            String    // CSV, JSON, PDF
  dataTypes         String[]  // USER_ACTIVITY, SECURITY_EVENTS, PERFORMANCE_METRICS
  dateRangeStart    DateTime
  dateRangeEnd      DateTime
  filters           Json      @default("{}")
  includeMetadata   Boolean   @default(false)
  compressOutput    Boolean   @default(false)
  status            String    @default("PROCESSING") // PROCESSING, COMPLETED, FAILED
  downloadUrl       String?
  expiresAt         DateTime?
  fileSize          Int?      // bytes
  recordCount       Int?
  estimatedTime     Int?      // seconds
  errorMessage      String?
  requestedBy       String
  requestedByName   String
  createdAt         DateTime  @default(now())
  completedAt       DateTime?
  updatedAt         DateTime  @updatedAt

  @@index([status, requestedBy])
  @@index([expiresAt])
  @@map("audit_exports")
}

// Alert configurations and thresholds
model SystemAlert {
  id              String   @id @default(cuid())
  type            String   // HIGH_ERROR_RATE, SLOW_RESPONSE, HIGH_QUEUE_SIZE, SYNC_FAILURE
  severity        String   // WARNING, CRITICAL
  message         String
  threshold       Float
  currentValue    Float?
  isActive        Boolean  @default(true)
  lastTriggered   DateTime?
  triggerCount    Int      @default(0)
  configuration   Json     @default("{}")
  createdBy       String
  createdByName   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([type, isActive])
  @@index([severity, isActive])
  @@map("system_alerts")
}

model AchievementRule {
  id           String   @id @default(cuid())
  name         String
  description  String?
  category     String
  type         String   // DELIVERY_COUNT, PERFORMANCE_SCORE, TIME_BASED, etc.
  criteria     Json     // Flexible criteria object
  reward       Json     // Achievement details and rewards
  isActive     Boolean  @default(true)
  priority     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("achievement_rules")
}

model RoleHistory {
  id           String   @id @default(cuid())
  userId       String
  roleId       String
  action       String   // ADDED, REMOVED, ACTIVATED, DEACTIVATED
  previousData Json?    // Previous role state for rollback
  changedBy    String   // Admin user ID who made the change
  changedByName String  // Admin user name
  reason       String?  // Optional reason for the change
  ipAddress    String?  // IP address of admin who made change
  userAgent    String?  // User agent of admin session
  createdAt    DateTime @default(now())

  @@map("role_history")
}

model BulkImport {
  id                String   @id @default(cuid())
  fileName          String
  fileSize          Int
  totalRows         Int
  processedRows     Int      @default(0)
  successfulRows    Int      @default(0)
  failedRows        Int      @default(0)
  status            String   @default("PROCESSING") // PROCESSING, COMPLETED, FAILED, CANCELLED
  errors            Json     @default("[]")        // Array of error messages with row numbers
  importedBy        String
  importedByName    String
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("bulk_imports")
}
